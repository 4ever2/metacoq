
DECLARE PLUGIN "metacoq_safechecker_plugin"

{

open Stdarg
open Pp
open PeanoNat.Nat
open Datatypes
open PCUICSafeChecker

let bytes_of_list l =
  let bytes = Bytes.create (List.length l) in
  let rec fill acc = function
    | [] -> bytes
    | c :: cs ->
      Bytes.set bytes acc c;
      fill (1 + acc) cs
  in fill 0 l

let pr_char_list l =
  (* We allow utf8 encoding *)
  str (Bytes.to_string (bytes_of_list l))

let time prefix f x =
  let start = Unix.gettimeofday () in
  let res = f x in
  let stop = Unix.gettimeofday () in
  let () = Feedback.msg_debug (prefix ++ str " executed in: " ++ Pp.real (stop -. start) ++ str "s") in
  res

let check env evm (c, ustate) =
  Feedback.msg_debug (str"Quoting");
  let term = time (str"Quoting") (Ast_quoter.quote_term_rec true env) (EConstr.to_constr evm c) in
  let uctx = UState.context_set ustate in
  Feedback.msg_debug (str"Universes added: " ++ Printer.pr_universe_ctx_set evm uctx);
  let ugraph = Environ.universes env in
  let levels = UGraph.domain ugraph in
  let cstrs, eqs = UGraph.constraints_of_universes ugraph in
  let levels, cstrs = 
    List.fold_right (fun eqs acc ->
      match Univ.Level.Set.elements eqs with
      | [] -> acc
      | x :: [] -> acc
      | x :: rest ->
        List.fold_right (fun p (levels, cstrs) ->
          (Univ.Level.Set.add p levels, Univ.Constraints.add (x, Univ.Eq, p) cstrs)) rest acc)
      eqs (levels, cstrs)
  in
  let levels = Univ.Level.Set.remove Univ.Level.set levels in
  let uctx = Univ.ContextSet.union uctx (levels, cstrs) in
  let () = 
    Feedback.msg_debug (str"Universes to reify: " ++ Printer.pr_universe_ctx_set evm uctx)
  in
  let uctx = time (str"Quoting universe context") 
    (fun uctx -> (Ast_quoter.quote_univ_contextset uctx)) uctx in
  let check =
    time (str"Checking")
      (SafeTemplateChecker.infer_and_print_template_program
        (*Config0.default_checker_flags*)
        Config0.type_in_type term)
      uctx
  in
  match check with
  | Coq_inl s -> Feedback.msg_info (pr_char_list s)
  | Coq_inr s -> CErrors.user_err (pr_char_list s)
}

VERNAC COMMAND EXTEND MetaCoqSafeCheck CLASSIFIED AS QUERY
| [ "MetaCoq" "SafeCheck" constr(c) ] -> {
    let env = Global.env () in
    let evm = Evd.from_env env in
    let c = Constrintern.interp_constr env evm c in
    check env evm c
  }
END

{

let retypecheck_term_dependencies env gr =
  let typecheck env c = ignore (Typeops.infer env c) in
  let typecheck_constant c =
    let auctx = Environ.constant_context env c in
    let names = Univ.AbstractContext.names auctx in
    let dp = Names.DirPath.make [Names.Id.of_string "MetaCoq"; Names.Id.of_string "Retypecheck"] in
    let fake_level i _ =
     Univ.Level.make (Univ.Level.UGlobal.make dp "" i)
    in
    let fake_inst = Univ.Instance.of_array (Array.mapi fake_level names) in
    let cu = (c, fake_inst) in
    let cbody, ctype, cstrs = Environ.constant_value_and_type env cu in
    let env' = Environ.push_context (Univ.UContext.make names (fake_inst, cstrs)) env in
    typecheck env' ctype;
    Option.iter (typecheck env') cbody
  in
  let st = Conv_oracle.get_transp_state (Environ.oracle (Global.env())) in
  let deps = Assumptions.assumptions ~add_opaque:true ~add_transparent:true
      st gr (Globnames.printable_constr_of_global gr) in
  let process_object k _ty =
    let open Printer in
    match k with
    | Variable id -> Feedback.msg_debug (str "Ignoring variable " ++ Names.Id.print id)
    | Axiom (ax, _) ->
      begin match ax with
        | Constant c -> typecheck_constant c
        | Positive mi -> () (* typecheck_inductive mi *)
        | Guarded (Names.GlobRef.ConstRef c) -> typecheck_constant c
        | Guarded _ -> ()
        | TypeInType c -> ()
        | UIP _ -> ()
      end
    | Opaque c | Transparent c -> typecheck_constant c
  in Printer.ContextObjectMap.iter process_object deps

let kern_check env evm gr =
  try
    let () = time (str"Coq kernel checking") (retypecheck_term_dependencies env) gr in
    Feedback.msg_info (Printer.pr_global gr ++ str " and all its dependencies are well-typed.")
  with e -> raise e
}

VERNAC COMMAND EXTEND MetaCoqCoqCheck CLASSIFIED AS QUERY
| [ "MetaCoq" "CoqCheck" global(c) ] -> {
    let env = Global.env () in
    let evm = Evd.from_env env in
    kern_check env evm (Nametab.global c)
  }
END
